"use client";
import {
  Button
} from "./chunk-VHU7XIJE.js";
import "./chunk-UQVUP6Y2.js";
import {
  OverlayService
} from "./chunk-KRYGYL3A.js";
import {
  CSSTransition
} from "./chunk-35YRXN6D.js";
import "./chunk-3FUVDPYE.js";
import {
  IconBase
} from "./chunk-JFSAVVKM.js";
import {
  Tooltip
} from "./chunk-SIRW5NNO.js";
import {
  Portal
} from "./chunk-MHVX7LJL.js";
import "./chunk-3QTN4EH6.js";
import {
  ComponentBase,
  useHandleStyle
} from "./chunk-WJQ7U75G.js";
import {
  useMountEffect,
  useOverlayListener,
  useUnmountEffect
} from "./chunk-MLAQUK3U.js";
import {
  PrimeReact,
  PrimeReactContext
} from "./chunk-MFF56USA.js";
import {
  DomHandler,
  IconUtils,
  ObjectUtils,
  UniqueComponentId,
  ZIndexUtils,
  classNames,
  mergeProps
} from "./chunk-V3FX2EIK.js";
import {
  require_react
} from "./chunk-AXJ2GJWQ.js";
import {
  __toESM
} from "./chunk-TCQZMY3T.js";

// node_modules/primereact/splitbutton/splitbutton.esm.js
var React2 = __toESM(require_react());

// node_modules/primereact/icons/chevrondown/index.esm.js
var React = __toESM(require_react());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var ChevronDownIcon = React.memo(React.forwardRef(function(inProps, ref) {
  var pti = IconBase.getPTI(inProps);
  return React.createElement("svg", _extends({
    ref,
    width: "14",
    height: "14",
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, pti), React.createElement("path", {
    d: "M7.01744 10.398C6.91269 10.3985 6.8089 10.378 6.71215 10.3379C6.61541 10.2977 6.52766 10.2386 6.45405 10.1641L1.13907 4.84913C1.03306 4.69404 0.985221 4.5065 1.00399 4.31958C1.02276 4.13266 1.10693 3.95838 1.24166 3.82747C1.37639 3.69655 1.55301 3.61742 1.74039 3.60402C1.92777 3.59062 2.11386 3.64382 2.26584 3.75424L7.01744 8.47394L11.769 3.75424C11.9189 3.65709 12.097 3.61306 12.2748 3.62921C12.4527 3.64535 12.6199 3.72073 12.7498 3.84328C12.8797 3.96582 12.9647 4.12842 12.9912 4.30502C13.0177 4.48162 12.9841 4.662 12.8958 4.81724L7.58083 10.1322C7.50996 10.2125 7.42344 10.2775 7.32656 10.3232C7.22968 10.3689 7.12449 10.3944 7.01744 10.398Z",
    fill: "currentColor"
  }));
}));
ChevronDownIcon.displayName = "ChevronDownIcon";

// node_modules/primereact/splitbutton/splitbutton.esm.js
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var classes = {
  icon: "p-button-icon p-c",
  root: function root(_ref) {
    var _classNames;
    var props = _ref.props, size = _ref.size;
    return classNames("p-splitbutton p-component", (_classNames = {
      "p-disabled": props.disabled,
      "p-button-loading-label-only": props.loading && !props.icon && props.label
    }, _defineProperty(_classNames, "p-button-".concat(props.severity), props.severity), _defineProperty(_classNames, "p-button-raised", props.raised), _defineProperty(_classNames, "p-button-rounded", props.rounded), _defineProperty(_classNames, "p-button-text", props.text), _defineProperty(_classNames, "p-button-outlined", props.outlined), _defineProperty(_classNames, "p-button-".concat(size), size), _classNames));
  },
  button: "p-splitbutton-defaultbutton",
  menuButton: "p-splitbutton-menubutton",
  menu: function menu(_ref2) {
    var props = _ref2.subProps;
    return classNames("p-menu p-menu-overlay p-component", props.menuClassName);
  },
  menuList: "p-menu-list p-reset",
  separator: "p-menu-separator",
  menuIcon: "p-menuitem-icon",
  menuLabel: "p-menuitem-text",
  anchor: function anchor(_ref3) {
    var _className = _ref3._className, disabled = _ref3.disabled;
    return classNames("p-menuitem-link", _className, {
      "p-disabled": disabled
    });
  },
  menuItem: "p-menuitem",
  transition: "p-connected-overlay"
};
var styles = "\n@layer primereact {\n    .p-splitbutton {\n        display: inline-flex;\n        position: relative;\n    }\n    \n    .p-splitbutton .p-splitbutton-defaultbutton,\n    .p-splitbutton.p-button-rounded > .p-splitbutton-defaultbutton.p-button,\n    .p-splitbutton.p-button-outlined > .p-splitbutton-defaultbutton.p-button {\n        flex: 1 1 auto;\n        border-top-right-radius: 0;\n        border-bottom-right-radius: 0;\n        border-right: 0 none;\n    }\n    \n    .p-splitbutton-menubutton,\n    .p-splitbutton.p-button-rounded > .p-splitbutton-menubutton.p-button,\n    .p-splitbutton.p-button-outlined > .p-splitbutton-menubutton.p-button {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        border-top-left-radius: 0;\n        border-bottom-left-radius: 0;\n    }\n    \n    .p-splitbutton .p-menu {\n        min-width: 100%;\n    }\n    \n    .p-fluid .p-splitbutton  {\n        display: flex;\n    }\n}\n";
var SplitButtonBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "SplitButton",
    id: null,
    label: null,
    icon: null,
    loading: false,
    loadingIcon: null,
    model: null,
    disabled: null,
    style: null,
    className: null,
    buttonClassName: null,
    menuStyle: null,
    menuClassName: null,
    menuButtonClassName: null,
    buttonProps: null,
    menuButtonProps: null,
    tabIndex: null,
    severity: null,
    rounded: false,
    raised: false,
    outlined: false,
    text: false,
    size: null,
    appendTo: null,
    tooltip: null,
    tooltipOptions: null,
    buttonTemplate: null,
    transitionOptions: null,
    dropdownIcon: null,
    onClick: null,
    onShow: null,
    onHide: null,
    children: void 0
  },
  css: {
    classes,
    styles
  }
});
function ownKeys$2(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$2(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var SplitButtonItem = React2.memo(function(props) {
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(key, options) {
    return ptm(key, _objectSpread$2({
      hostName: props.hostName
    }, options));
  };
  var onClick = function onClick2(e) {
    if (props.menuitem.command) {
      props.menuitem.command({
        originalEvent: e,
        item: props.menuitem
      });
    }
    if (props.onItemClick) {
      props.onItemClick(e);
    }
    e.preventDefault();
  };
  var createSeparator = function createSeparator2() {
    var separatorProps = mergeProps({
      className: cx("separator"),
      role: "separator"
    }, getPTOptions("separator"));
    return React2.createElement("li", separatorProps);
  };
  var createMenuitem = function createMenuitem2() {
    if (props.menuitem.visible === false) {
      return null;
    }
    var _props$menuitem = props.menuitem, disabled = _props$menuitem.disabled, _icon = _props$menuitem.icon, _label = _props$menuitem.label, template = _props$menuitem.template, url = _props$menuitem.url, target = _props$menuitem.target, _className = _props$menuitem.className;
    var className = classNames("p-menuitem-link", _className, {
      "p-disabled": disabled
    });
    var iconClassName = classNames("p-menuitem-icon", _icon);
    var menuIconProps = mergeProps({
      className: cx("menuIcon")
    }, getPTOptions("menuIcon"));
    var icon = IconUtils.getJSXIcon(_icon, _objectSpread$2({}, menuIconProps), {
      props: props.splitButtonProps
    });
    var menuLabelProps = mergeProps({
      className: cx("menuLabel")
    }, getPTOptions("menuLabel"));
    var label = _label && React2.createElement("span", menuLabelProps, _label);
    var anchorProps = mergeProps({
      href: url || "#",
      role: "menuitem",
      className: cx("anchor"),
      target,
      onClick,
      "aria-label": _label
    }, getPTOptions("anchor"));
    var content = React2.createElement("a", anchorProps, icon, label);
    if (template) {
      var defaultContentOptions = {
        onClick,
        className,
        labelClassName: "p-menuitem-text",
        iconClassName,
        element: content,
        props
      };
      content = ObjectUtils.getJSXElement(template, props.menuitem, defaultContentOptions);
    }
    var menuItemProps = mergeProps({
      className: cx("menuItem"),
      role: "none"
    }, getPTOptions("menuItem"));
    return React2.createElement("li", menuItemProps, content);
  };
  var createItem = function createItem2() {
    return props.menuitem.separator ? createSeparator() : createMenuitem();
  };
  var item = createItem();
  return item;
});
SplitButtonItem.displayName = "SplitButtonItem";
function ownKeys$1(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread$1(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys$1(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var SplitButtonPanel = React2.forwardRef(function(props, ref) {
  var ptm = props.ptm, cx = props.cx;
  var getPTOptions = function getPTOptions2(key, options) {
    return ptm(key, _objectSpread$1({
      hostName: props.hostName
    }, options));
  };
  var createElement3 = function createElement4() {
    var menuProps = mergeProps({
      ref,
      className: cx("menu", {
        subProps: props
      }),
      style: props.menuStyle,
      onClick: props.onClick
    }, getPTOptions("menu"));
    var menuListProps = mergeProps({
      id: props.menuId,
      className: cx("menuList"),
      role: "menu"
    }, getPTOptions("menuList"));
    var transitionProps = mergeProps({
      classNames: cx("transition"),
      "in": props["in"],
      timeout: {
        enter: 120,
        exit: 100
      },
      options: props.transitionOptions,
      unmountOnExit: true,
      onEnter: props.onEnter,
      onEntered: props.onEntered,
      onExit: props.onExit,
      onExited: props.onExited
    }, getPTOptions("transition"));
    return React2.createElement(CSSTransition, _extends2({
      nodeRef: ref
    }, transitionProps), React2.createElement("div", menuProps, React2.createElement("ul", menuListProps, props.children)));
  };
  var element = createElement3();
  return React2.createElement(Portal, {
    element,
    appendTo: props.appendTo
  });
});
SplitButtonPanel.displayName = "SplitButtonPanel";
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var SplitButton = React2.memo(React2.forwardRef(function(inProps, ref) {
  var context = React2.useContext(PrimeReactContext);
  var props = SplitButtonBase.getProps(inProps, context);
  var _React$useState = React2.useState(props.id), _React$useState2 = _slicedToArray(_React$useState, 2), idState = _React$useState2[0], setIdState = _React$useState2[1];
  var _React$useState3 = React2.useState(false), _React$useState4 = _slicedToArray(_React$useState3, 2), overlayVisibleState = _React$useState4[0], setOverlayVisibleState = _React$useState4[1];
  var elementRef = React2.useRef(null);
  var defaultButtonRef = React2.useRef(null);
  var overlayRef = React2.useRef(null);
  var metaData = {
    props,
    state: {
      id: idState,
      overlayVisible: overlayVisibleState
    }
  };
  var _SplitButtonBase$setM = SplitButtonBase.setMetaData(metaData), ptm = _SplitButtonBase$setM.ptm, cx = _SplitButtonBase$setM.cx, isUnstyled = _SplitButtonBase$setM.isUnstyled;
  useHandleStyle(SplitButtonBase.css.styles, isUnstyled, {
    name: "splitbutton"
  });
  var _useOverlayListener = useOverlayListener({
    target: elementRef,
    overlay: overlayRef,
    listener: function listener(event, _ref) {
      var valid = _ref.valid;
      valid && hide();
    },
    when: overlayVisibleState
  }), _useOverlayListener2 = _slicedToArray(_useOverlayListener, 2), bindOverlayListener = _useOverlayListener2[0], unbindOverlayListener = _useOverlayListener2[1];
  var onPanelClick = function onPanelClick2(event) {
    OverlayService.emit("overlay-click", {
      originalEvent: event,
      target: elementRef.current
    });
  };
  var onDropdownButtonClick = function onDropdownButtonClick2() {
    overlayVisibleState ? hide() : show();
  };
  var onItemClick = function onItemClick2() {
    hide();
  };
  var show = function show2() {
    setOverlayVisibleState(true);
  };
  var hide = function hide2() {
    setOverlayVisibleState(false);
  };
  var onOverlayEnter = function onOverlayEnter2() {
    ZIndexUtils.set("overlay", overlayRef.current, context && context.autoZIndex || PrimeReact.autoZIndex, context && context.zIndex["overlay"] || PrimeReact.zIndex["overlay"]);
    DomHandler.addStyles(overlayRef.current, {
      position: "absolute",
      top: "0",
      left: "0"
    });
    alignOverlay();
  };
  var onOverlayEntered = function onOverlayEntered2() {
    bindOverlayListener();
    props.onShow && props.onShow();
  };
  var onOverlayExit = function onOverlayExit2() {
    unbindOverlayListener();
  };
  var onOverlayExited = function onOverlayExited2() {
    ZIndexUtils.clear(overlayRef.current);
    props.onHide && props.onHide();
  };
  var alignOverlay = function alignOverlay2() {
    DomHandler.alignOverlay(overlayRef.current, defaultButtonRef.current.parentElement, props.appendTo || context && context.appendTo || PrimeReact.appendTo);
  };
  useMountEffect(function() {
    if (!idState) {
      setIdState(UniqueComponentId());
    }
  });
  useUnmountEffect(function() {
    ZIndexUtils.clear(overlayRef.current);
  });
  React2.useImperativeHandle(ref, function() {
    return {
      props,
      show,
      hide,
      getElement: function getElement() {
        return elementRef.current;
      }
    };
  });
  var createItems = function createItems2() {
    if (props.model) {
      return props.model.map(function(menuitem, index) {
        return React2.createElement(SplitButtonItem, {
          hostName: "SplitButton",
          splitButtonProps: props,
          menuitem,
          key: index,
          onItemClick,
          ptm,
          cx
        });
      });
    }
    return null;
  };
  if (props.visible === false) {
    return null;
  }
  var hasTooltip = ObjectUtils.isNotEmpty(props.tooltip);
  var sizeMapping = {
    large: "lg",
    small: "sm"
  };
  var size = sizeMapping[props.size];
  var buttonContent = props.buttonTemplate ? ObjectUtils.getJSXElement(props.buttonTemplate, props) : null;
  var items = createItems();
  var menuId = idState + "_menu";
  var dropdownIcon = function dropdownIcon2() {
    var iconProps = mergeProps({
      className: cx("icon")
    }, ptm("icon"));
    var icon = props.dropdownIcon || React2.createElement(ChevronDownIcon, iconProps);
    var dropdownIcon3 = IconUtils.getJSXIcon(icon, _objectSpread({}, iconProps), {
      props
    });
    return dropdownIcon3;
  };
  var rootProps = mergeProps({
    ref: elementRef,
    id: idState,
    className: classNames(props.className, cx("root", {
      size
    })),
    style: props.style
  }, SplitButtonBase.getOtherProps(props), ptm("root"));
  return React2.createElement(React2.Fragment, null, React2.createElement("div", rootProps, React2.createElement(Button, _extends2({
    ref: defaultButtonRef,
    type: "button",
    className: classNames(props.buttonClassName, cx("button")),
    icon: props.icon,
    loading: props.loading,
    loadingIcon: props.loadingIcon,
    severity: props.severity,
    label: props.label,
    raised: props.raised,
    onClick: props.onClick,
    disabled: props.disabled,
    tabIndex: props.tabIndex,
    size: props.size,
    outlined: props.outlined,
    text: props.text
  }, props.buttonProps, {
    pt: ptm("button"),
    __parentMetadata: {
      parent: metaData
    },
    unstyled: props.unstyled
  }), buttonContent), React2.createElement(Button, _extends2({
    type: "button",
    className: classNames(props.menuButtonClassName, cx("menuButton")),
    icon: dropdownIcon,
    onClick: onDropdownButtonClick,
    disabled: props.disabled,
    "aria-expanded": overlayVisibleState,
    "aria-haspopup": "true",
    "aria-controls": overlayVisibleState ? menuId : null
  }, props.menuButtonProps, {
    size: props.size,
    severity: props.severity,
    outlined: props.outlined,
    text: props.text,
    raised: props.raised,
    pt: ptm("menuButton"),
    __parentMetadata: {
      parent: metaData
    },
    unstyled: props.unstyled
  })), React2.createElement(SplitButtonPanel, {
    hostName: "SplitButton",
    ref: overlayRef,
    appendTo: props.appendTo,
    menuId,
    menuStyle: props.menuStyle,
    menuClassName: props.menuClassName,
    onClick: onPanelClick,
    "in": overlayVisibleState,
    onEnter: onOverlayEnter,
    onEntered: onOverlayEntered,
    onExit: onOverlayExit,
    onExited: onOverlayExited,
    transitionOptions: props.transitionOptions,
    ptm,
    cx
  }, items)), hasTooltip && React2.createElement(Tooltip, _extends2({
    target: elementRef,
    content: props.tooltip
  }, props.tooltipOptions, {
    pt: ptm("tooltip")
  })));
}));
SplitButton.displayName = "SplitButton";
export {
  SplitButton
};
//# sourceMappingURL=primereact_splitbutton.js.map
