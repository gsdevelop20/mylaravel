"use client";
import {
  OverlayService
} from "./chunk-KRYGYL3A.js";
import {
  CSSTransition
} from "./chunk-35YRXN6D.js";
import "./chunk-3FUVDPYE.js";
import {
  Portal
} from "./chunk-MHVX7LJL.js";
import "./chunk-3QTN4EH6.js";
import {
  ComponentBase,
  useHandleStyle
} from "./chunk-WJQ7U75G.js";
import {
  useMountEffect,
  useOverlayListener,
  useUnmountEffect
} from "./chunk-MLAQUK3U.js";
import {
  PrimeReact,
  PrimeReactContext
} from "./chunk-MFF56USA.js";
import {
  DomHandler,
  IconUtils,
  ObjectUtils,
  UniqueComponentId,
  ZIndexUtils,
  classNames,
  mergeProps
} from "./chunk-V3FX2EIK.js";
import {
  require_react
} from "./chunk-AXJ2GJWQ.js";
import {
  __toESM
} from "./chunk-TCQZMY3T.js";

// node_modules/primereact/menu/menu.esm.js
var React = __toESM(require_react());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null)
    return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object")
      return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e, n, i, u, a = [], f = true, o = false;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t)
          return;
        f = false;
      } else
        for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = true)
          ;
    } catch (r2) {
      o = true, n = r2;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
          return;
      } finally {
        if (o)
          throw n;
      }
    }
    return a;
  }
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var styles = "\n@layer primereact {\n    .p-menu-overlay {\n        position: absolute;\n        /* Github #3122: Prevent animation flickering  */\n        top: -9999px;\n        left: -9999px;\n    }\n    \n    .p-menu ul {\n        margin: 0;\n        padding: 0;\n        list-style: none;\n    }\n    \n    .p-menu .p-menuitem-link {\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        text-decoration: none;\n        overflow: hidden;\n        position: relative;\n    }\n    \n    .p-menu .p-menuitem-text {\n        line-height: 1;\n    }\n}\n";
var classes = {
  root: function root(_ref) {
    var props = _ref.props, context = _ref.context;
    return classNames("p-menu p-component", {
      "p-menu-overlay": props.popup,
      "p-input-filled": context && context.inputStyle === "filled" || PrimeReact.inputStyle === "filled",
      "p-ripple-disabled": context && context.ripple === false || PrimeReact.ripple === false
    });
  },
  menu: "p-menu-list p-reset",
  action: function action(_ref2) {
    var item = _ref2.item;
    return classNames("p-menuitem-link", {
      "p-disabled": item.disabled
    });
  },
  menuitem: "p-menuitem",
  submenuHeader: function submenuHeader(_ref3) {
    var submenu = _ref3.submenu;
    return classNames("p-submenu-header", {
      "p-disabled": submenu.disabled
    });
  },
  separator: "p-menu-separator",
  label: "p-menuitem-text",
  icon: "p-menuitem-icon",
  transition: "p-connected-overlay"
};
var inlineStyles = {
  submenuHeader: function submenuHeader2(_ref4) {
    var submenu = _ref4.submenu;
    return submenu.style;
  },
  menuitem: function menuitem(_ref5) {
    var item = _ref5.item;
    return item.style;
  }
};
var MenuBase = ComponentBase.extend({
  defaultProps: {
    __TYPE: "Menu",
    id: null,
    model: null,
    popup: false,
    popupAlignment: "left",
    style: null,
    className: null,
    autoZIndex: true,
    baseZIndex: 0,
    appendTo: null,
    transitionOptions: null,
    onShow: null,
    onHide: null,
    children: void 0,
    closeOnEscape: true
  },
  css: {
    classes,
    styles,
    inlineStyles
  }
});
var usePrevious = function usePrevious2(newValue) {
  var ref = React.useRef(void 0);
  React.useEffect(function() {
    ref.current = newValue;
  });
  return ref.current;
};
var useUnmountEffect2 = function useUnmountEffect3(fn) {
  return React.useEffect(function() {
    return fn;
  }, []);
};
var useEventListener = function useEventListener2(_ref) {
  var _ref$target = _ref.target, target = _ref$target === void 0 ? "document" : _ref$target, type = _ref.type, listener = _ref.listener, options = _ref.options, _ref$when = _ref.when, when = _ref$when === void 0 ? true : _ref$when;
  var targetRef = React.useRef(null);
  var listenerRef = React.useRef(null);
  var prevListener = usePrevious(listener);
  var prevOptions = usePrevious(options);
  var bind = function bind2() {
    var bindOptions = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    if (ObjectUtils.isNotEmpty(bindOptions.target)) {
      unbind();
      (bindOptions.when || when) && (targetRef.current = DomHandler.getTargetElement(bindOptions.target));
    }
    if (!listenerRef.current && targetRef.current) {
      listenerRef.current = function(event) {
        return listener && listener(event);
      };
      targetRef.current.addEventListener(type, listenerRef.current, options);
    }
  };
  var unbind = function unbind2() {
    if (listenerRef.current) {
      targetRef.current.removeEventListener(type, listenerRef.current, options);
      listenerRef.current = null;
    }
  };
  React.useEffect(function() {
    if (when) {
      targetRef.current = DomHandler.getTargetElement(target);
    } else {
      unbind();
      targetRef.current = null;
    }
  }, [target, when]);
  React.useEffect(function() {
    if (listenerRef.current && ("" + prevListener !== "" + listener || prevOptions !== options)) {
      unbind();
      when && bind();
    }
  }, [listener, options, when]);
  useUnmountEffect2(function() {
    unbind();
  });
  return [bind, unbind];
};
var useOnEscapeKey = function useOnEscapeKey2(ref, condition, callback) {
  var handleEsc = function handleEsc2(event) {
    if (event.key === "Esc" || event.key === "Escape") {
      event.stopImmediatePropagation();
      callback(event);
    }
    return;
  };
  var _useEventListener = useEventListener({
    type: "keydown",
    listener: handleEsc
  }), _useEventListener2 = _slicedToArray(_useEventListener, 2), bindKeyDownListener = _useEventListener2[0], unbindKeyDownListener = _useEventListener2[1];
  React.useEffect(function() {
    if (!condition) {
      return;
    }
    if (!ref.current) {
      return;
    }
    bindKeyDownListener();
    return function() {
      unbindKeyDownListener();
    };
  });
  return [ref, callback];
};
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var Menu = React.memo(React.forwardRef(function(inProps, ref) {
  var context = React.useContext(PrimeReactContext);
  var props = MenuBase.getProps(inProps, context);
  var _React$useState = React.useState(props.id), _React$useState2 = _slicedToArray(_React$useState, 2), idState = _React$useState2[0], setIdState = _React$useState2[1];
  var _React$useState3 = React.useState(!props.popup), _React$useState4 = _slicedToArray(_React$useState3, 2), visibleState = _React$useState4[0], setVisibleState = _React$useState4[1];
  var _MenuBase$setMetaData = MenuBase.setMetaData({
    props,
    state: {
      id: idState,
      visible: visibleState
    }
  }), ptm = _MenuBase$setMetaData.ptm, cx = _MenuBase$setMetaData.cx, sx = _MenuBase$setMetaData.sx, isUnstyled = _MenuBase$setMetaData.isUnstyled;
  useHandleStyle(MenuBase.css.styles, isUnstyled, {
    name: "menu"
  });
  var menuRef = React.useRef(null);
  var targetRef = React.useRef(null);
  useOnEscapeKey(targetRef, props.popup && props.closeOnEscape, function(event) {
    hide(event);
  });
  var _useOverlayListener = useOverlayListener({
    target: targetRef,
    overlay: menuRef,
    listener: function listener(event, _ref) {
      var valid = _ref.valid;
      valid && hide(event);
    },
    when: visibleState
  }), _useOverlayListener2 = _slicedToArray(_useOverlayListener, 2), bindOverlayListener = _useOverlayListener2[0], unbindOverlayListener = _useOverlayListener2[1];
  var onPanelClick = function onPanelClick2(event) {
    if (props.popup) {
      OverlayService.emit("overlay-click", {
        originalEvent: event,
        target: targetRef.current
      });
    }
  };
  var onItemClick = function onItemClick2(event, item) {
    if (item.disabled) {
      event.preventDefault();
      return;
    }
    if (!item.url) {
      event.preventDefault();
    }
    if (item.command) {
      item.command({
        originalEvent: event,
        item
      });
    }
    if (props.popup) {
      hide(event);
    }
  };
  var onItemKeyDown = function onItemKeyDown2(event, item) {
    var listItem = event.currentTarget.parentElement;
    switch (event.which) {
      case 40:
        var nextItem = findNextItem(listItem);
        nextItem && nextItem.children[0].focus();
        event.preventDefault();
        break;
      case 38:
        var prevItem = findPrevItem(listItem);
        prevItem && prevItem.children[0].focus();
        event.preventDefault();
        break;
    }
  };
  var findNextItem = function findNextItem2(item) {
    var nextItem = item.nextElementSibling;
    return nextItem ? DomHandler.getAttribute(nextItem, '[data-p-disabled="true"]') || !DomHandler.getAttribute(nextItem, '[data-pc-section="menuitem"]') ? findNextItem2(nextItem) : nextItem : null;
  };
  var findPrevItem = function findPrevItem2(item) {
    var prevItem = item.previousElementSibling;
    return prevItem ? DomHandler.getAttribute(prevItem, '[data-p-disabled="true"]') || !DomHandler.getAttribute(prevItem, '[data-pc-section="menuitem"]') ? findPrevItem2(prevItem) : prevItem : null;
  };
  var toggle = function toggle2(event) {
    if (props.popup) {
      visibleState ? hide(event) : show(event);
    }
  };
  var show = function show2(event) {
    targetRef.current = event.currentTarget;
    setVisibleState(true);
    props.onShow && props.onShow(event);
  };
  var hide = function hide2(event) {
    targetRef.current = event.currentTarget;
    setVisibleState(false);
    props.onHide && props.onHide(event);
  };
  var onEnter = function onEnter2() {
    DomHandler.addStyles(menuRef.current, {
      position: "absolute",
      top: "0",
      left: "0"
    });
    ZIndexUtils.set("menu", menuRef.current, context && context.autoZIndex || PrimeReact.autoZIndex, props.baseZIndex || context && context.zIndex["menu"] || PrimeReact.zIndex["menu"]);
    DomHandler.absolutePosition(menuRef.current, targetRef.current, props.popupAlignment);
  };
  var onEntered = function onEntered2() {
    bindOverlayListener();
  };
  var onExit = function onExit2() {
    targetRef.current = null;
    unbindOverlayListener();
  };
  var onExited = function onExited2() {
    ZIndexUtils.clear(menuRef.current);
  };
  useMountEffect(function() {
    if (!idState) {
      setIdState(UniqueComponentId());
    }
  });
  useUnmountEffect(function() {
    ZIndexUtils.clear(menuRef.current);
  });
  React.useImperativeHandle(ref, function() {
    return {
      props,
      toggle,
      show,
      hide,
      getElement: function getElement() {
        return menuRef.current;
      },
      getTarget: function getTarget() {
        return targetRef.current;
      }
    };
  });
  var createSubmenu = function createSubmenu2(submenu, index) {
    var key = idState + "_sub_" + index;
    var items = submenu.items.map(createMenuItem);
    var submenuHeaderProps = mergeProps({
      id: key,
      key,
      role: "presentation",
      className: classNames(submenu.className, cx("submenuHeader", {
        submenu
      })),
      style: sx("submenuHeader", {
        submenu
      }),
      "data-p-disabled": submenu.disabled
    }, ptm("submenuHeader"));
    return React.createElement(React.Fragment, {
      key
    }, React.createElement("li", submenuHeaderProps, submenu.label), items);
  };
  var createSeparator = function createSeparator2(index) {
    var key = idState + "_separator_" + index;
    var separatorProps = mergeProps({
      id: key,
      key,
      className: cx("separator"),
      role: "separator"
    }, ptm("separator"));
    return React.createElement("li", separatorProps);
  };
  var createMenuItem = function createMenuItem2(item, index) {
    if (item.visible === false) {
      return null;
    }
    var linkClassName = classNames("p-menuitem-link", {
      "p-disabled": item.disabled
    });
    var iconClassName = classNames("p-menuitem-icon", item.icon);
    var iconProps = mergeProps({
      className: cx("icon")
    }, ptm("icon"));
    var icon = IconUtils.getJSXIcon(item.icon, _objectSpread({}, iconProps), {
      props
    });
    var labelProps = mergeProps({
      className: cx("label")
    }, ptm("label"));
    var label = item.label && React.createElement("span", labelProps, item.label);
    var tabIndex = item.disabled ? null : 0;
    var key = item.id || idState + "_" + index;
    var actionProps = mergeProps({
      href: item.url || "#",
      className: cx("action", {
        item
      }),
      role: "menuitem",
      target: item.target,
      onClick: function onClick(event) {
        return onItemClick(event, item);
      },
      onKeyDown: function onKeyDown(event) {
        return onItemKeyDown(event);
      },
      tabIndex,
      "aria-disabled": item.disabled,
      "data-p-disabled": item.disabled
    }, ptm("action"));
    var content = React.createElement("a", actionProps, icon, label);
    if (item.template) {
      var defaultContentOptions = {
        onClick: function onClick(event) {
          return onItemClick(event, item);
        },
        onKeyDown: function onKeyDown(event) {
          return onItemKeyDown(event);
        },
        className: linkClassName,
        tabIndex,
        labelClassName: "p-menuitem-text",
        iconClassName,
        element: content,
        props
      };
      content = ObjectUtils.getJSXElement(item.template, item, defaultContentOptions);
    }
    var menuitemProps = mergeProps({
      id: key,
      key,
      className: classNames(item.className, cx("menuitem")),
      style: sx("menuitem", {
        item
      }),
      role: "none",
      "data-p-disabled": item.disabled || false
    }, ptm("menuitem"));
    return React.createElement("li", menuitemProps, content);
  };
  var createItem = function createItem2(item, index) {
    return item.separator ? createSeparator(index) : item.items ? createSubmenu(item, index) : createMenuItem(item, index);
  };
  var createMenu = function createMenu2() {
    return props.model.map(createItem);
  };
  var createElement2 = function createElement3() {
    if (props.model) {
      var menuitems = createMenu();
      var rootProps = mergeProps({
        className: classNames(props.className, cx("root", {
          context
        })),
        style: props.style,
        onClick: function onClick(e) {
          return onPanelClick(e);
        }
      }, MenuBase.getOtherProps(props), ptm("root"));
      var menuProps = mergeProps({
        className: cx("menu"),
        role: "menu"
      }, ptm("menu"));
      var transitionProps = mergeProps({
        classNames: cx("transition"),
        "in": visibleState,
        timeout: {
          enter: 120,
          exit: 100
        },
        options: props.transitionOptions,
        unmountOnExit: true,
        onEnter,
        onEntered,
        onExit,
        onExited
      }, ptm("transition"));
      return React.createElement(CSSTransition, _extends({
        nodeRef: menuRef
      }, transitionProps), React.createElement("div", _extends({
        id: props.id,
        ref: menuRef
      }, rootProps), React.createElement("ul", menuProps, menuitems)));
    }
    return null;
  };
  var element = createElement2();
  return props.popup ? React.createElement(Portal, {
    element,
    appendTo: props.appendTo
  }) : element;
}));
Menu.displayName = "Menu";
export {
  Menu
};
//# sourceMappingURL=primereact_menu.js.map
